{"noir_version":"0.23.0+602f23f4fb698cf6e37071936a2a46593a998d08","name":"CounterStateChannel","functions":[{"name":"increment_single","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":23}],"owner":[{"start":23,"end":24}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354]},"bytecode":"","debug_symbols":""},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":23}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212]},"bytecode":"H4sIAAAAAAAA/+Xd5XNUVxzG8U2yu6l7CU5wh9XsXdzdqtQLWzb1lir1UupOlXopdaeutLTUvcAfxPMMm5m8gFeczHDme2eeyUxe3NnP3rtXz/n9dqdSqR2pvUuT0qy0KO3d/udlRuNv7sCWfFrrSO9jvcVcR6lUrxTq+WJ+da5QrSXlXKlc60jySb6clNcUkmKxnpSSSrVWreSq+VKxnu8sV4udjRWnw33GXE+4M1pHpgfcmYPcndU6sj3gzgZ0d+33rd32+9R+9v8D/dxtgbdX19IceLuFNPeOxNwU0NwnEnNzQHPfSMwtAc39IjGnA5r7R2LOBDQPiMScDWgeGIm5NaB5UCTmtoDmdqB5MNA8BGgeCjQPA5qHA80jgOaRQPMooHk00DwGaB4LNI8DmscDzROA5olAcw5ozgPNBaC5CDSXgOYy0NwBNFeA5gRorgLNk4DmyUDzFKB5KtA8DWieDjTPAJpnAs2zgObZQPMcoHku0DwPaJ4PNC8AmhcCzYuA5sVA8xKgeSnQvAxoXg40rwCaTwKaTwaaTwGaTwWaTwOaTweaVwLNZwDNZwLNZwHNZwPN5wDN5wLN5wHN5wPNq4Dm1UBzDWi+AGheAzTXgeZOoPlCoPkioPlioPkSoPlSoPkyoPlyoPkKoPlKoHkt0HwV0Hw10HwN0Hwt0Hwd0Hw90LwOaL4BaL4RaL4JaL4ZaL4FaL4VaL4NaL4daF4PNN8BNG8Amu8Emu8Cmu8Gmu8Bmu8Fmu8Dmu8Hmh8Amh8Emh8Cmh8Gmh8Bmh8FmjcCzY8BzY8DzU8AzU8CzU8BzU8DzZuA5meA5meB5ueA5ueB5heA5heB5peA5peB5s1A8ytA8xag+VWg+TWg+XWg+Q2g+U2g+S2g+W2g+R2g+V2g+T2g+X2g+QOg+UOgeSvQ/BHQ/DHQ/AnQ/CnQ/BnQ/DnQ/AXQ/CXQ/BXQ/DXQ/A3Q/C3QvA1o/i4Sc2tA8/fA7bwdaP4BaP4RaN4BNP8ENP8cifmQgOZfIjEfGtD8ayTmwwKaf4vEfHhA8++RmI8IaP4jEvORAc1/RmI+KqD5r0jMRwc0/x2J+ZiA5n8iMR8b0PxvJObjApr/i8R8fEDz/5GYTwho3hmJ+cSA5l2RmHsFNO8OaG7rZm5quFuUtJJRsoqfX/q+0PdJvm/wdbSvK32d5esOn4d9XvJx2sct/469X3s79+q2/m2Nv72VPkpfpZ/SXxmgDFQGKe3KYGWIMlQZpgxXRigjlVHKaGWMMlYZp4xXJigT/Z0oeaXg71opKWWlQ6koiVJVJimTlSnKVGWaMr3x3c5UZimzlTnKXGWeMl9ZoCxUFimLlSXKUmWZslxZobj/vPuxuz+5+3W7f7X7Oa9U3O/X/W/dD9b9Ud0v1P0z3U/S/RVXKe6/V1Pcn839yty/y/2s3N/J/Y7c/8f9cNwfxv1S3D/E/TTcX2Kt4v4Drsfv+vSu1+765a7nvU5xvWfXP3Y9YNfHdb1Y1091PVHX11yvuP7iBsX1+VyvzvXbXM/M9b1c78r1n1wPyfWBXC/H9WNcT8X1RTYqrj/hegyuT+D5+p6/7vncmxTP9/X8V88H9fxIzxf0/DnPJ/P8qs2K599sUTw/w/MVPH7f49k9vtvjnT3+1+NhPT7U4yU9ftDj6Ty+bKvi8Ucej+PxKR6v4fELfp/v99t+3+v3n34f6Pdjfl/kfdPvE/x8fbvi569+Hunnc35e5ec3fp7h+3vf7/r+z/dDvj/w9bKvH3095esLn299/vHx2Mcn/167lj1HMZVAULsAAA==","debug_symbols":"q1bKyU9OLMnMzytWsqqurQUA"},{"name":"init_counter","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"start","type":{"kind":"field"},"visibility":"private"},{"name":"end","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"end":[{"start":24,"end":25}],"inputs":[{"start":0,"end":23}],"owner":[{"start":25,"end":26}],"start":[{"start":23,"end":24}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]},"bytecode":"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","debug_symbols":"5VnLTiQxDPyXPiMUO3Zsz6+sOKBdVkJCsFq4If59uwfihCZ0a8JqmMcJkKrSZccpJ+Z5uHv4ef10+3D/OGyeBx42P56Hxz/X99Nfj0/Xf5+GTbgYbu5/jT9fLobft3c3w4bGXz/AMAR+Q2JAcbA2wZEogymAg4G1gYZgktcGCNHe4a8uhnSkumVvukk0gznqV3VrSzcw5W8ACy2rN8xhmqBDjXrU2EGpgfBlORBIyidoWZBJrkgIGFcWlgAZLFDKwOJWORytcjxa5fFolVNTuUnmIMCKcpSEGayR6g98BIumN6wmWYES5iMqxKlYI7TAHqRQMfQx6VOMfMAxpowVZl6OkV0wW5EgLe9nTwdzqY/0mo50GulIIR+YxFCnY4pRTiTG5Ecg2DxGPbuyFgi+rNRl3bBILXYayxGAyF3XATu/XEvOtYYwsxAMp5GOscVkrMbldCDnAomhrArb6kA4kXSYr0th5jaIpxGjcr46qek8xrjfGC25RwXTZeyqRSF9XbyWd7Hq2gahryxoVmd9UsMHpeY/XHnU/KH+7nnZVuMFWUGp1XqSP1oTVTf51JKQfFlMXA7oVAsfg0P3NhiLcgW8WlxyuAlkvxNUfaqZwIiWPbxetWt4grrfjKjkjFhdJ7zVYt+nRWdaYtivFmPXUh37dqWoP5uTBZx5RIRjFY77FQ5BzE8G6LL0COXMbceUSzaEaN48I6yAl564MZ5lSr7teRTpPPO98ESKfDIpAS0pWQNHH1gQV+HB66zxsj1Wp5iTQqmaclAmQQ8Je0ixh0Q9JO4hpR5S8+rGmDsKV8e/kLSHZB2k9ihh/O9WJpE0SNBDwh5SsyLG4Unux6EVE/WQuIfUrIjkfSBBoyLal/k1ku5M4svmh6K/1gnSzDVHjnZwrIPTtqI1EuxKQv3EVdh8fA2leTBkEvWQ2q6i7Delsknp7fK4+yaNHO3gWAdn902aSDtvUuRPbJJSrm+qBjSv7WwiaQ+pbZO+Salq9aOhX728/AM="},{"name":"increment_multiple","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":23}],"owner":[{"start":23,"end":24}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"note_hash_tree_root","type":{"kind":"field"}},{"name":"nullifier_tree_root","type":{"kind":"field"}},{"name":"contract_tree_root","type":{"kind":"field"}},{"name":"l1_to_l2_message_tree_root","type":{"kind":"field"}},{"name":"archive_root","type":{"kind":"field"}},{"name":"public_data_tree_root","type":{"kind":"field"}},{"name":"global_variables_hash","type":{"kind":"field"}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"deployer_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"constructor_vk_hash","type":{"kind":"field"}},{"name":"function_tree_root","type":{"kind":"field"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027]},"bytecode":"","debug_symbols":""},{"name":"get_counter","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"owner":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[1,2,3]},"bytecode":"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","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"preimage","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"preimage":[{"start":3,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"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","debug_symbols":""}],"events":[],"file_map":{"18":{"source":"use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n","path":"std/grumpkin_scalar_mul.nr"},"28":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"39":{"source":"use dep::aztec::{\n    protocol_types::address::AztecAddress,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal COUNTER_NOTE_LEN: Field = 3;\n\nstruct CounterNote {\n    owner: AztecAddress,\n    value: Field,\n    end: Field,\n    header: NoteHeader,\n}\n\nimpl CounterNote {\n    pub fn new(owner: AztecAddress, value: Field, end: Field) -> Self {\n        CounterNote {\n            owner,\n            value,\n            end,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn serialize(self) -> [Field; COUNTER_NOTE_LEN] {\n        [self.owner.to_field(), self.value, self.end]\n    }\n\n    pub fn deserialize(serialized: [Field; COUNTER_NOTE_LEN]) -> Self {\n        CounterNote {\n            owner: AztecAddress::from_field(serialized[0]),\n            value: serialized[1],\n            end: serialized[2],\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(CounterNoteMethods, self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high\n        ], 0)\n    }\n\n    pub fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(CounterNoteMethods, self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high\n        ], 0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            get_public_key(self.owner),\n            self.serialize()\n        );\n    }\n}\n\nfn deserialize(serialized: [Field; COUNTER_NOTE_LEN]) -> CounterNote {\n    CounterNote::deserialize(serialized)\n}\n\nfn serialize(note: CounterNote) -> [Field; COUNTER_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: CounterNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: CounterNote, context: &mut PrivateContext) -> Field {\n    note.compute_nullifier(context)\n}\n\nfn compute_nullifier_without_context(note: CounterNote) -> Field {\n    note.compute_nullifier_without_context()\n}\n\nfn get_header(note: CounterNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut CounterNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: CounterNote) {\n    note.broadcast(context, slot)\n}\n\nglobal CounterNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    compute_nullifier_without_context,\n    get_header,\n    set_header,\n    broadcast\n};","path":"/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/counter_channel/src/counter_note.nr"},"40":{"source":"mod counter_note;\n\ncontract CounterStateChannel {\n    use dep::std::option::Option;\n    use dep::aztec::{\n        protocol_types::{\n            address::AztecAddress,\n            abis::function_selector::FunctionSelector\n        },\n        context::{PrivateContext, Context},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        state_vars::{\n            map::Map,\n            singleton::Singleton\n        },\n        log::emit_encrypted_log,\n        oracle::get_public_key::get_public_key,\n    };\n    use crate::counter_note::{CounterNote, CounterNoteMethods, COUNTER_NOTE_LEN};\n\n    struct Storage {\n        counters: Map<AztecAddress, Singleton<CounterNote, COUNTER_NOTE_LEN>>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                counters: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        Singleton::new(context, slot, CounterNoteMethods)\n                    },\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    /**\n     * Initialize a new counter for a given user\n     * @notice: mocks staking to start a new channel\n     * \n     * @param start - the value to start the counter at\n     * @param end - the value to conclude the counter at\n     */\n    #[aztec(private)]\n    fn init_counter(start: Field, end: Field, owner: AztecAddress) {\n        // get the singleton from storage\n        let counter_singleton = storage.counters.at(owner);\n        // check to see if the counter has already been initialized\n        // unreachable since unconstrained :( how to check if initialized???\n        // assert(\n        //     counter_singleton.is_initialized(Option::some((owner))) == false,\n        //     \"Counter has already been initialized for this account\"\n        // );\n        // // initialize a new singleton for the counter\n        counter_singleton.initialize(\n            &mut CounterNote::new(owner, start, end),\n            Option::some(owner),\n            true\n        );\n    }\n\n    /**\n     * Increment the counter once (testing util)\n     */\n    #[aztec(private)]\n    fn increment_single(owner: AztecAddress) {\n        // get the singleton from storage\n        let counter_singleton = storage.counters.at(owner);\n        // check that the counter can be incremented\n        let mut counter = counter_singleton.get_note(true);\n        assert(\n            counter.value as u120 < counter.end as u120, \"Counter has already been incremented to its end value\"\n        );\n        // increment value in note and replace in storage\n        counter.value += 1;\n        counter_singleton.replace(&mut counter, true);\n        // @todo: publicly mark counter as complete if start == end\n    }\n\n    /**\n     * Increment the counter recursively until it reaches the end value\n     * @notice: DO NOT INCREMENT MORE THAN 64 TIMES (current call stack limit)\n     */\n    #[aztec(private)]\n    fn increment_multiple(owner: AztecAddress) {\n        // get the singleton from storage\n        let counter_singleton = storage.counters.at(owner);\n        // get the counter note from storage\n        let mut counter = counter_singleton.get_note(true);\n\n        // increment value in note and replace in storage\n        counter.value += 1;\n        counter_singleton.replace(&mut counter, true);\n\n        // if the counter has not reached its end value, increment again\n        if counter.value as u120 < counter.end as u120 {\n            context.call_private_function(\n                context.this_address(),\n                FunctionSelector::from_signature(\"increment_multiple(Field)\"),\n                [owner.to_field()]\n            );\n        }\n    }\n\n    unconstrained fn get_counter(owner: AztecAddress) -> pub [Field; 3] {\n        let note = storage.counters.at(owner).view_note();\n        [note.owner.to_field(), note.value, note.end]\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        preimage: [Field; COUNTER_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(CounterNoteMethods, note_header, preimage)\n    }\n}","path":"/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/counter_channel/src/main.nr"},"41":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/log.nr"},"44":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"},"45":{"source":"use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = 0;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note, context);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"},"46":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__OUTER_NULLIFIER,\n    hash::pedersen_hash,\n};\nuse crate::{\n    context::PrivateContext,\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header, context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier_without_context = note_interface.compute_nullifier_without_context;\n    let inner_nullifier = compute_nullifier_without_context(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/note/utils.nr"},"48":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n    },\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"},"51":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/types/vec.nr"},"60":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE,\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    )\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"},"61":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nuse dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"},"63":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"},"64":{"source":"use dep::protocol_types::{\n    address::{\n        AztecAddress,\n        PartialAddress,\n    },\n    grumpkin_point::GrumpkinPoint,\n};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(pub_key, partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"},"69":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::NUM_FIELDS_PER_SHA256,\n    grumpkin_point::GrumpkinPoint,\n};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: AztecAddress, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"},"74":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::grumpkin_scalar::GrumpkinScalar;\n\nstruct KeyPair {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinScalar,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> KeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    KeyPair {\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinScalar { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> KeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinScalar {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"78":{"source":"use crate::oracle::get_public_key::get_public_key;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::{\n    grumpkin_scalar::GrumpkinScalar,\n    grumpkin_scalar_mul::grumpkin_fixed_base,\n};\n\npub fn validate_nullifier_key_against_address(\n    address: AztecAddress,\n    nullifier_public_key: GrumpkinPoint,\n    nullifier_secret_key: GrumpkinScalar\n) {\n    // TODO: Nullifier public key should be part of the address.\n    // Validation of the secret key should happen in the kernel circuit.\n    let owner_public_key = get_public_key(address);\n    assert(owner_public_key.x == nullifier_public_key.x);\n    assert(owner_public_key.y == nullifier_public_key.y);\n    let computed_public_key = grumpkin_fixed_base(nullifier_secret_key);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/key/nullifier_key.nr"},"80":{"source":"use dep::protocol_types::{\n    abis::{\n        block_header::BlockHeader,\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/abi.nr"},"81":{"source":"use crate::{\n    abi::{\n        PrivateContextInputs,\n        PublicContextInputs,\n    },\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        public_call::call_public_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        get_block_header::get_block_header,\n        nullifier_key::get_nullifier_key_pair,\n    },\n    types::vec::BoundedVec,\n    utils::Reader,\n};\nuse dep::protocol_types::{\n    abis::{\n        block_header::BlockHeader,\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        call_stack_item::PrivateCallStackItem,\n        call_stack_item::PublicCallStackItem,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::{\n    grumpkin_scalar::GrumpkinScalar,\n    option::Option,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            block_header: inputs.block_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinScalar {\n        let key_pair = get_nullifier_key_pair(account);\n        validate_nullifier_key_against_address(account, key_pair.public_key, key_pair.secret_key);\n        // TODO: Add request to context.\n        // self.context.push_nullifier_key_validation_request(public_key, secret_key);\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_message_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress, \n        function_selector: FunctionSelector, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress, \n        function_selector: FunctionSelector, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address,\n            function_selector, \n            args_hash,\n            self.side_effect_counter,\n        );\n        let mut reader = Reader::new(fields);\n\n        let item = PrivateCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: FunctionData {\n                selector: FunctionSelector::from_field(reader.read()),\n                is_internal: reader.read() as bool,\n                is_private: reader.read() as bool,\n                is_constructor: reader.read() as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : AztecAddress::from_field(reader.read()),\n                    storage_contract_address : AztecAddress::from_field(reader.read()),\n                    portal_contract_address : EthAddress::from_field(reader.read()),\n                    function_selector: FunctionSelector::from_field(reader.read()), // practically same as fields[1]\n                    is_delegate_call : reader.read() as bool,\n                    is_static_call : reader.read() as bool,\n                    is_contract_deployment: reader.read() as bool,\n                    start_side_effect_counter: reader.read() as u32,\n                },\n                args_hash: reader.read(),\n                return_values: reader.read_array([0; RETURN_VALUES_LENGTH]), // +1\n                read_requests: reader.read_struct_array(SideEffect::deserialise, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n                new_commitments: reader.read_struct_array(SideEffect::deserialise, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n                new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialise, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n                private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n                public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n                new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n                end_side_effect_counter: reader.read() as u32,\n                encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n                unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n                encrypted_log_preimages_length: reader.read(),\n                unencrypted_log_preimages_length: reader.read(),\n                block_header: BlockHeader{\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : reader.read(),\n                    nullifier_tree_root : reader.read(),\n                    contract_tree_root : reader.read(),\n                    l1_to_l2_message_tree_root : reader.read(),\n                    archive_root : reader.read(),\n                    public_data_tree_root: reader.read(),\n                    global_variables_hash: reader.read(),\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: GrumpkinPoint {\n                      x: reader.read(), \n                      y: reader.read()\n                    },\n                    constructor_vk_hash : reader.read(),\n                    function_tree_root : reader.read(),\n                    contract_address_salt : reader.read(),\n                    portal_contract_address : EthAddress::from_field(reader.read()),\n                },\n                chain_id: reader.read(),\n                version: reader.read(),\n            },\n            is_execution_request: reader.read() as bool,\n        };\n\n        reader.finish();\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n        \n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress, \n        function_selector: FunctionSelector, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress, \n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: FunctionData {\n                selector: FunctionSelector::from_field(reader.read()),\n                is_internal: reader.read() as bool,\n                is_private: reader.read() as bool,\n                is_constructor: reader.read() as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : AztecAddress::from_field(reader.read()),\n                    storage_contract_address : AztecAddress::from_field(reader.read()),\n                    portal_contract_address : EthAddress::from_field(reader.read()),\n                    function_selector: FunctionSelector::from_field(reader.read()), // practically same as fields[1]\n                    is_delegate_call : reader.read() as bool,\n                    is_static_call : reader.read() as bool,\n                    is_contract_deployment: reader.read() as bool,\n                    start_side_effect_counter: reader.read() as u32,\n                },\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_message_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress, \n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress, \n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/context.nr"},"82":{"source":"pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\nstruct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/utils.nr"},"93":{"source":"use dep::std::option::Option;\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    },\n    hash::pedersen_hash,\n};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    nullifier_key::get_nullifier_secret_key,\n    notes::check_nullifier_exists,\n};\n\npub fn compute_singleton_initialization_nullifier(\n    storage_slot: Field,\n    owner: Option<AztecAddress>,\n    context: Option<&mut PrivateContext>\n) -> Field {\n    if owner.is_some() {\n        let secret = if context.is_some() {\n            context.unwrap_unchecked().request_nullifier_secret_key(owner.unwrap_unchecked())\n        } else {\n            get_nullifier_secret_key(owner.unwrap_unchecked())\n        };\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<AztecAddress>, Option<&mut PrivateContext>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<AztecAddress>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner, Option::none());\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<AztecAddress>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner, self.context);\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/state_vars/singleton.nr"},"94":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"107":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        block_header::BlockHeader,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::{\n        pedersen_hash,\n    },\n    utils::bounded_vec::BoundedVec,\n};\nuse crate::constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n        PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n        GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n};\nuse crate::traits::Hash;\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    \n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    block_header: BlockHeader,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n        fn hash(self) -> Field {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.push_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.push_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.push_array(self.new_nullifiers[i].serialize());\n        }\n        fields.push_array(self.private_call_stack_hashes);\n        fields.push_array(self.public_call_stack_hashes);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH, \"Incorrect number of input fields when hashing PrivateCircuitPublicInputs\");\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.push_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.push_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.push_array(self.new_nullifiers[i].serialize());\n        }\n        fields.push_array(self.private_call_stack_hashes);\n        fields.push_array(self.public_call_stack_hashes);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\n#[test]\nfn serialization_smoke() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _serialized = pcpi.serialize();\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"108":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::{\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\nuse crate::traits::Hash;\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    public_inputs: PrivateCircuitPublicInputs,\n    function_data: FunctionData,\n    // Not really needed for PrivateCallStackItem.\n    is_execution_request: bool,\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.contract_address.to_field(),\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_stack_item.nr"},"110":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl SideEffect {\n    pub fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n\n    pub fn deserialise(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.value == 0)\n        & (self.counter == 0)\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl SideEffectLinkedToNoteHash{\n    pub fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n\n    pub fn deserialise(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.value == 0)\n        &  (self.note_hash == 0)\n        & (self.counter == 0)\n    }\n}\n\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"111":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::Hash;\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"117":{"source":"use crate::abis::function_selector::FunctionSelector;\nuse crate::constants::GENERATOR_INDEX__FUNCTION_DATA;\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator([\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"120":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n\n    pub fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"135":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n    },\n    hash::pedersen_hash,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(pub_key: GrumpkinPoint, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_key.x, pub_key.y, partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n\n    pub fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n\n    pub fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n\n    pub fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n\n    pub fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_address_salt : Field, function_tree_root : Field, constructor_hash : Field) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                // TODO why the zeroes?\n                0,\n                0,\n                contract_address_salt,\n                function_tree_root,\n                constructor_hash\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"158":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::utils::bounded_vec::BoundedVec;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    function_tree_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, function_tree_root };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"165":{"source":"use crate::address::EthAddress;\nuse crate::constants::{\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\nuse crate::hash::pedersen_hash;\nuse crate::grumpkin_point::GrumpkinPoint;\nuse crate::traits::Hash;\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key : GrumpkinPoint,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n\n    fn assert_is_zero(self) {\n        self.deployer_public_key.assert_is_zero();\n        assert(self.constructor_vk_hash == 0);\n        assert(self.function_tree_root == 0);\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n\n}\n","path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.20.0/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"}}}