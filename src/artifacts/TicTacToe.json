{
  "name": "TicTacToe",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+1WUQ7CIAwtbLAxFr2HX5h4gN3/VEJs4wvDL8sH0SYNULLH47Upi0Rk6GVT9pnOJvsHj+k7uxs9rNSTpx2E56TI0zRqQJvv3EFXbY5uAI5+AI6Lcm0KR6nRNXvIvmWP2W8cD3Su4xJz1T1LzPPcQmzh+cSj57O080e6mA+vn8MUQJsZNBJtXENz39B8aWi+AsYV9qnKyYW/Ccp6Ya7FTLU+YB7gfj3qYdPFTAUzKmMWjB00Ef2Ee4T9CHrtynoZOFNwZY38/lx/m2uAGPYg2V8hZqt7YJ/bAaPuEaoPJvEBlt4/5Y4FxGb16REUewK1dKEV3QsAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "current_game_index",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx0QhYCEl/gzqnwgr6BH1Si4ogE/F8QyKiDVfXSVPgS10lmnLFdIyJGvraSwYzyD8UPFG/L2sy0QHy1MP0bwxesRDnbsu7KW2xd3tN2RMNA2lbiOXJ9GFeIK8lvHRFbKS0S+djL2u1p34/cCSN8fB8xJ4MO+i5r5NVbmnn20Yh5WvoG10blsGQu0AG4TuXyT95Yl7fJGGviRV9E0h38OJfI5/6x6lyUZWYqyNADtTC5/2FTs7tkD2b98H96PG/37tqf++5iKC2nUrSUGvs88iipo9hUGSPFgMOl1fJUe7/GNWrN9gJfUAj+EAcAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_board",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_game",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "index",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::game::Game",
          "fields": [
            {
              "name": "host",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "player",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "turn",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            {
              "name": "winner",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82Y207DMAyG03XtTgw2xvkgVXCPusElF30GuEeaxOBmMGkt4vUhIxYfWUFIcxmWurhO4v+33SbpImNMYD4khE4RW+badDUZBnq+0jp41hCHFemL3q87p7cwTiSGninxivXzlpJ7DbG1EZufi5b5Wl8/B3XYQvi0sulyE+nGMSKWiP/cZdAFPwZfJS7D2HzWX8nnovYNXZ+X1kcTOQmREysd9DfQ11TOV2CW3xe5J7/fcq2tmWtV9W/p+hxtOM58h8038XSU47E+ZI2pA6sDzG4FtdtwvgJ3CUYbuJsV4ApO5HCFh2CFGHPu2i7y4dejitxQMuiCRS7BmrlwDzKwdb1ccV9iDW7R33M697e+08MS3z3YtpzeL5nLHPW8WNLVZJEj4mS4F6w2OPT/AZfmH3GRmojfLY/LOnG3dXEX6+gAuPKMbiPvgj8Ajx3l+K2P3RIeO+Ah+LvgsafLY2R97Jfw2AMPwd8HjwNdHmng8WgC9wC4h7q4izPdUUn8h4hf8GVcCzrXtmOnD2A78XJnbadeXFxziSFr6TFscvY+gU3O5uLXnj1jzM9cm64mVxWc064Yk8hP+1mMVvmbaGifOdmz82I2Hz9Obibj+wC0hKq0/Iylzm2w4c2xNlnaI9hkfgM28cPPiqW/BzKl+BmoKQk0dPcRxnDsmWuvXXv7kcMkn86KJE2e33/H0+nsdXJ/kbAvT55e8iLJi/G8SB7ms6dkePEGdHDsfRQRAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "join_game",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "index",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "open_channel",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "host",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "play_game",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "index",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "start_game",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dB5gcR5UH8J3Nvb1BYVdxtRrlvNqknFY5y8qSoyxbwbIVbGllOeecc7ZFzhnMwWEODnNwmIPDnH2Yg8McHCaanPOrnnr4r1J7vq3PVaiGff19z939errqV1Udd9bao0VFRZmi3FRC0afo+Im3d+p5y2ubWjPuymrx6SwuEGdJgThLC8RZViDO8gJxVhSIs7JAnFGBOKsKxBkXiLO6QJw1BeKsLRBnXYE4exWIs3eBOPs4dA4EZ189r9fzBj3vp+f99XyAnvO+g3QbS/X6YIpGiiEUTXobd8hQiizFMIrhFCMoRlKMohhNMYZiLMU4ivEUEygmUkyiaKaYrMtqpWijaKfooJhCMZViGsV0ihkUMylmUcymmEMxl2Ke7rv5FAsoFlIsolhMsYRiKcUyiuUUKyhWUqyiWE2xRrclq9tyEsVainUU6yk2UGyk2ESxmWILxVaKkylOoTiV4jSK0ynOoNhGcSbFdoqzKM6m2EGxk2IXxW6Kcyj2UJxLcR7FXop9FPuNPj9AcT7FBRQH9bZeetshii6KwxQXUhyhuIjiYopLKC6luIzicoorKK6kuIriaoprjLKupbiO4nqKGyhupLiJ4maKWyhupbiN4naKOyjupLiL4m6Ke3RZxbqseynuM3L3Uzyglx/U84f0/GE9f0TPH9Xzx/T8cT1/Qs+PUqyryi2rZyPzHVbl+JjPQI6P/2LI8blQAjk+L0ohx+dIGeT4fCmHHJ87FZAbpJcrITcYlnneqJerIDdEL8eQa9LL1ZAbqpdrIJfVy7WQG6aX6yA3XC/3gtwIvdy76Ng2qqlTz1te46TKdHwNbVF2Ht8+0B4e376Q4/GthxyPbwPkuO39IMfj2x9yPL4DIMfjOxByPL6DIMfji8cFj28j5Hh8h0COx7cJcjy+QyHH45uFHI/vMMhxvw2HHPcbHxeqn+bDdp7w3MKfM3GOt+O5VQJlco6347nF2/Hc4u14buF2nvN2PLd4O55HvB3PGR4bPD94HzzGeGzweOJy8NjhscHjhMvGY4LHBo8Jrg+PCR4bPCbYgMcEH9N4TLArCzk+pvGYYCsfE6pd5bB/p563vLapFZ08ZYz1Tljm+svB7cjSEoOlP9Qz0G097di/3WnzQLAMdtxmvF91xzIYLI1uLcnPu4a4LTMZU+5rPNe4HrynNzluTwbq4XJ5neuKIYfnfVOKb6hbX1sG6uFyeX0o+DiH1yC+3vB5oq7fJ4M1lOsEntPF4BvgwdffwjcAfLxfCfgGefANtPANAh/vh/do1+c+PiN3x9cIPt6vDHyuz2W8ZnTHl3Z+l8M868E31MKXBR/vVwG+4R58wyx8w8HH+1WCb6QH3wgL30jw8X4R+EZ78I2y8I0GH+9XBb6xHnxjLHxjwTcGltk33oNvnIVvPJh4v2rwTfTgm2Dhmwg+3q8GfM0efJMsfM3g4/1qwdfiwTfZwtcCPt6vDnxtHnytFr428PF+vcDX4cHXbuHrAB/vhz87murBN8XCNxV8vF8f8E334Jtm4ZsOPt6vL/hmevDNsPDNBB/vVw++2W59bco3y8I3Gyzz3Fo6lGWOhWUeWOa6tRzzOyCOykx+DjvfcZmqjAXQJ3OM8mPYPh/6a4Hj/sLfPeNyeR19Yu3ZVmWZZTjx925mBeDj3FyPlsiwqCnftS7Nh2O5yK0vuS8stPAtAstSp5b25Geliy0sS8GyxKkld19Y5rbM5Bq+HPzcVq4nhu045ssdty0DdXK5vI4+sYpVrGIVq1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVq1jF6t6qLAsNZwSfWxiAj3NLPFoiw6KmjLHeCctpPhzLlW59ye/UrLDwrQTLGqeWtuR3alZZWNaAZbVTS+53ak5yW2byOzVrwc9t5Xpi2I5jvtZx2zJQJ5fL6+gTq1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxSrWQrEqywrDGcHnVgTg49xqj5bIsKgp38/Z03w4luvd+pLvJNZZ+NaDZZNbS/LvP2ywsGwCy0a3luQ7ic1uy2xRZWwBP7eV64lhO475Fsdty0CdXC6vo0+sPduqLOsMZwSfWxeAj3MbPVoiw6KmfNelNB+O5clufck1fKuFD/+90NOcWlqT75VPsbCcBpZTnVpy1/DT3ZaZXMPPAD+3leuJYTuO+RmO25aBOrlcXkefWMUqVrGKVaxiFatYe7ZVWbYazgg+tzUAH+dO9WiJDIua8r2npPlwLM9060ve6bZZ+M4Ey9lOLbl3uu0WlrPBcpZTS+6dbofbMpN3up3g57ZyPTFsxzHf6bhtGaiTy+V19IlVrGIVq1jFKlaxirVnW5Vlm+GM4HPbAvBx7iyPlsiwqCnfe0qaD8dyt1tf8k63y8K3GyznerCcY2E5Fyx73FqSd7rz3JaZvNPtBT+3leuJYTuO+V7HbctAnVwur6OvUKzKsstwRvC5XQH4OLfHoyUyLGrKd/6k+XAs97v1Jef3PgvffrBc4MFywMJyAVjOd2tJrjUH3ZaZXGsOgZ/byvXEsB3H/JDjtmWgTi6X19FXKFZl2Wc4I/jcvgB8nDvfoyUyLGrKd/6k+XAsD3vwdVn4DoOvK8V3xIPvQgvfEfDxfhH4Lvbgu8jCdzH4eD/8G6OXevBdYuG7FHyXwDL7Lvfgu8zCdzmYeL9q8F3pwXeFhe9K8PF++DdGr/bgu8rCdzX4eD/8G6PXevBdY+G7Fny8Xx34rvfgu87Cdz34eD+8/t3owXeDhe9G8N2Q4rvZg+8mC9/N4LspxXerB98tFr5bwXdLiu92D77bLHy3g++2FN+dHnx3WPjuBMtdbi0tMVjugnru8dDmu4u632auP4b90HefB9+9Fr77wHdviu8BD777LXwPgI/3w2P6IQ++By18D4HvwRTfIx58D1v4HgHfwym+xzz4HrXwPQa+R1N8T3jwPW7hewJ8j6f4XufBd9TC9zrwHU3xvcGD7/UWvjeA7/Upvjd58L3Rwvcm8L0xxfcWD743W/jeAr43p/je5sH3Vgvf28D31hTfOzz43m7hewf43p7ie5cH3zstfO8C3ztTfO/x4Hu3he894Ht3iu99HnzvtfC9D3zvTfF9wIPv/Ra+D4Dv/Sm+D3nwfdDC9yHwfTDF92G3vuQ7gyctfB8Gy0fdWpL/L/2fLCwfBctH3FqS7y/+2W2ZyfcXHwM/t5XriWE7jvnHHLctA3VyubyOPrH2bKuyPGk4I/jckwH4OPcRj5bIsKgp33UpzYdj+XG3vuQa/pSF7+Ng+aRTS+7fO/8XC8snwfIJp5bcNfxf3ZaZXMM/BX5uK9cTw3Yc8085blsG6uRyeR19YhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVq1jFWihWZXnKcEbwuacC8HHuEx4tkWFRU8ZY74TlNB+O5afd+pLvJJ628H0aLJ91asl9J/FvFpbPguUzTi257yT+3W2ZyXcSnwM/t5XriWE7jvnnHLctA3VyubyOPrGKVaxiFatYxSpWsYpVrGIVq1jFKlaxilWsYi0Uq7I8bTgj+NzTAfg49xmPlsiwqCnfz9nTfDiWn3frS76TeMbC93mwfNGpJfe3Hv7DwvJFsHzBqSX3ncR/ui0z+U7iS+DntnI9MWzHMf+S47ZloE4ul9fRJ1axilWsYhWrWMUq1p5tVZZnDGcEn3smAB/nvuDREhkWNeV7T0nz4Vh+2a0vead71sL3ZbA879SSe6f7LwvL82B5zqkl9073327LbFFlfAX83FauJ4btOOZfcdy2DNTJ5fI6+sQqVrGKVaxiFatYxdqzrcryrOGM4HPPBuDj3HMeLZFhUVO+95Q0H47lV936kne6Fyx8XwXL151acu90/2Nh+TpYvubUknun+1+3ZSbvdN8AP7eV64lhO475Nxy3LQN1crm8jj6xilWsYhWrWMUqVrH2bKuyvGA4I/jcCwH4OPc1j5bIsKgp33tKmg/H8ptufck73YsWvm+C5dtuLcnfGfg/C8u3wfItt5bkne7/3ZaZvNN9B/zcVq4nhu045t9x3LYM1Mnl8jr6xNqzrcryouGM4HMvBuDj3Lc8WiLDoqZ816U0H47ld936kmv4Sxa+74LlB24tyTX8exaWH4Dl+24tyTX8h27LTK7hPwI/t5XriWE7jvmPHLctA3VyubyOPrH2bKuyvGQ4I/jcSwH4OPd9j5bIsKgp33UpzYdj+WO3vuQa/rKF78dg+ZkHy08sLD8Dy0/dWpJr+M/dlplcw38Bfm4r1xPDdhzzXzhuWwbq5HJ5HX2FYlWWlw1nBJ97OQAf537q0RIZFjXlO3/SfDiWv/Lg+6WF71fg+2WK7zcefL+28P0GfL9O8f3Og++3Fr7fge+3Kb4/ePD93sL3B/D9PsX3Jw++P1r4/gS+P6b4/uLB92cL31/A9+cUXybj3meC8vm4/hg+iL5it762GOouhnpKHPdDvjaXYJv1VBeQpTogSxSQpTwgS0lAlpqALFUBWSoCspQGZKkPyFIbkCUOyFIZkKUsIEvmBFuiouOfpyLYXgyfKzb2Vf04teqV7WW8D5RTrnMlKWWXQdmlerk8c/y+2EdlHvoI6+mEda6rCg2ZE28pC8hSGZAlDshSG5ClPiBLaUCWioAsVQFZagKylARkKQ/IEgVkqQ7IUheQpfjvZOFnJy631LCcyHor3NabfJ9VCfXys2QF9DvXXwmOKreO5HtDdKjJWD3mebsKLJHjsVBlxo77WZVZ7bbMdlVGDXQS9x/bY9heDf1V4+HYjY1jl9fR111r2Qm2+hr/WsfnjLpPVEJf1hp9iv1dp5dLIV8B7e3toZ97wTU9A3XUQb19PNTL9ZTpetnBdZXAZ57XDyE12lPv1pP8Tltvi+taPfRNXw/XtQYP949+0CBuawOc17wdv8/p52HcG4zzmtfR110rnhti/cexvtr3iw0eLDh1wnJDigXveSfaUhdQv1QHZIkCspQHZCkJyFIT0HlUE1C/VAVkqQjIUhqQpT4gS21AljggS2VAlrKALJkTbHm1710bjHdhleNnwd6Q66+X+0KuOKUOvtf1gxxfQ/rDe+f8quPLxj7y8eyL9XTCOteF37v29/wc3h1LWUCWyoAscUCW2oAs9QFZSgOyVARkqQrIUhOSJROOpSSgfikPyBIFZKkOyFIXkKUsoPOoOKVfXD/7Yp1F0P4GqHOA2zrbVJmDHbdDnVsDoR3ctzh1wvJgaN8gxxZVZqPbMpPvQYZAg7itXE8M2/tB24Z4OHYbM8f2Ka8PAQtP+DPwRg8WnDphuTHFUheQpTogSxSQpTwgS0lAFjynT7SlJqB+qQrIUhGQpTQgS31AltqALHFAlsqALGUBWTIn2PJqP3fm7QPgc/z8NRByTXp5EOSKU+rge90QyPE1hMtQ47K86viysY98PG82Ge9KTcbzJv7cucnzs293LGUBWSoDssQBWWoDstQHZCkNyFIRkKUqIEtNQBZ+LwnBUhJQv5QHZIkCslQHZKkLyFKcYhnq1tKBz4g8GavHPIMOBYvrZ19VZtZtmcn/AzHMcZmqjOHQSdx/bI9h+zDor+EejqNs5thx4nX0ibVnW1W9I5zW2578PbOsxXVjhMc+UGWO9HCOj4IGcVtHwviOShnfUR7Gd6QxvryOPrGKVaxiFatYxSpWsYpVrGIVq1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxerequod7bTetuR3LrBeNRmrf6urCOr30QeqzDFuy0x+52IsNIjbOgbGd2zK+I71ML5jjPHldfSJVaxiFatYxSpWsYpVrGIVq1jFKlaxilWsYhVroVhVvePc1pv8/8VYr5qM1WN+Zj3OYx+oMse7LTP5mfUEaBC3dTyM74SU8Z3gYXzHG+PL6+gTa8+2qnonOq23NflearzFOT7RYx+oMid5OMeboUHc1kkwvs0p49vsYXwnGePL6+gTq1jFKlaxilWsYhVrz7aqeic7rTf3zI/1qslYPeaZf7LHPlBltrgtM3nmx3+Ml9vaAuPbmjK+rR7Gt8UYX15Hn1jFKlaxilWsYhWrWHu2VdXb5rbetsioV03G6jHP/G0e+0CV2e62zOSZvwMaxG1th/HtSBnfDg/j226ML6+jr1Csqt4pHo7FdotjcYrHPlBlTvVwLE6DBnFbp8L4TksZ32kexneqMb68jr5CsUaQKy56JcfbSyA3XedKITdD58ogNxPaxLlZOlcBudk6Vwm5OTpXD7m5Ood/d2eeXsa/z9Opl7OQm6+Xh0NugV4eCbmFenkU5Bbp5TGQW6yXx0JuiV4eD7mlenkC5Jbp5UmQW66XmyG3wriPqtxK436mcquMa5zKrTauNSq3xjjWVO4kWOb5Wp2rgtw6OGY5t17nqiG3QedqILdR52oht0nn6iC3OcXHx+JUyPGxiMcuH4vTIcfH4gzI8bE4E3J8LM6CHB+LsyHHfTQHctxHcyHHfTQPctxHnZDjPpoPOe6jBZDjPloIuV46twhyvXVuMeT66NwSyPXVuaWQ4/NsGeQadG455Prp3ArI9de5lZAboHOrIDdQ51ZDbpDOrYHcYJ3DY7NR59ZCbojOrYNck86th9xQndsAuazObYTcMJ3bBLnhOrcZrlvqGOJjsFPPW17blNwryx2XiecFT/meBcphXubYos4nPi8OdR04uH33zvU7t+/IAKvUIBYDDZfxVsSnLt6K+NTFWxHvj7cdLqcStvloOraNyy01jOVgc1RvB14Ceco3/PgnOV0fiqqP+RKoh3/LwT1dO3H82cp9kzb+6nMlxuf+wcattVDHLd95i+OWAbfZLmfwPlBZsa68VGN50FTj+B4e64aqe7K6B6t7rrrHqntqH/DdrufqHqrumeoeqe6J6h6o7nnqHqfuaeoepu5Z6h6l7knqHpQtyt1j1D1lBMVIilEUoynGUIylGEcxnmICxUSKSRTNFJNVn1CoP0LfRtFO0UExhWIqxTSK6RQzKGZSzKKYTTGHYi7FPN238ykWUCykWESxmGIJxVKKZRTLKVZQrKRYRbGaYg3FSRRrKdZRrKfYQLGRYhPFZootFFspTqY4heJUitMoTqc4g2IbxZkU2ynOojibYgfFTopdFLspzqHYQ3EuxXkUeyn2UeynOEBxPsUFFAcpDlF0URymuJDiCMVFFBdTXEJxKcVlFJdTXEFxJcVVFFdTXENxLcV1FNdT3EBxI8VNFDdT3EJxK8VtRbnxvoPiToq7KO6muIfiXor7KO6neIDiQYqHKB6meITiUYrHKB6neILiaNErBzse9M/pM3a2Xt+QO8myh/Ye6Mq2ZPfTf7fv3XvgyM4dzVncdii77/Chruyhru0Hu7K7Dh7Yl21t/isE5kiErMsBAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "turn",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "index",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "row",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "col",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJzNlMsKgzAQRf9l1lIyM4mvXyldSGtBEC3VneTfayHFFkPdiNydwrlwFpkzUdtfq7Hpu4HKiczJUXmeaHhU3ft/GKvnSKXL8iKhurvNnzmnPqF709ZUsk9WLEsqgWVVXVh1EVqdDbAWbmEl85dktkmhbDIomxzKpoCyYYOlw1g6gqWjWDoWSweryIyVZMZqMmNFmbGqLFhVFqwqC1aVBavKglVlObjK1nCArZgfnTUrnAZW5Evd2qB+cMH3VD+49juqazQ2YrLPaAZXr0yjSdgaRQ93axQ9r61R9Ai2RtHn92fk/QtU9DsQ",
      "eJzV3M2qJNeZhtF7qbFo8vvZO2LrVpoemG43GIzdtD0zuneHQFWScaAsiCBz5UgSZJ7zDuo8X+pIK/7x5c9//e8//P1Pf/3L3778+I8vj//Yvvz4n//48rf/+8Nffv7nv/39D///9y8/Pn748se//M/x159++PK/f/rzH7/8GD/98G+vyu5Rv7zy+Pu5fXv1micvj237+uLHr1+4xk//9cOxY0d2LGRHPJQhoQxJZUgpQ1oZMpQhUxmidDWUsIZS1lTKmkpZUylrKmVNpayplDWVsqZS1lTKmkpZSylrKWUtpayllLWUspZS1lLKWkpZSylrKWVtpaytlLWVsrZS1lbK2kpZWylrK2VtpaytlHUoZR1KWYdS1qGUdShlHUpZh1LWoZR1KGUdSlmnUtaplHUqZZ1KWadS1qmUdSplnUpZp1LWqZR1U8q6KWXdlLJuSlk3paybUtZNKeumlHVTyropZd2Vsu5KWXelrLtS1l0p666UdVfKuitl3ZWy7kpZl1LWpZR1KWVdSlmXUtallHUpZV1KWZdS1qWUNR5KWuOhtDUeSlzjodQ1Hkpe46H0NR5KYOOhFDYeSmLjwTQW4lhMYx2Q5Ygsh2Q5JstBWY7KclgW47KCgVnByKxgaFYwNisYnBWMzgqGZwXjs4IBWsEIrWCIVjBGKxikFYzSCoZpBeO0goFawUitYKhWMFYrGKwVjNYKhmsF47WCAVvBiK1gyFYwZisYtBWM2gqGbQXjtoKBW8HIrWDoVjB2Kxi8FYzeCoZvBeO3ggFcwQiuYAhXMIYrGMQVjOIKhnEF47iCgVzBSK5gKFcwlisYzBWM5gqGcwXjuYIBXcGIrmBIVzCmKxjUFYzqCoZ1BeO6goFdwciuYGhXMLYrGNwVjO4KhncF47uCAV7BCK9giFcwxisY5BWM8gqGeQXjvJJxXsk4r2ScVzLOKx9KY5NxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeRXjvIpxXsU4r2KcVz2UxhbjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM82rGeTXjvJpxXs04r34ojW3GeTXjvJpxXs04r2acVzPOqxnn1YzzasZ5NeO8mnFezTivZpxXM86rGefVjPNqxnk147yacV7NOK9mnFczzqsZ59WM82rGeTXjvJpxXs04r2acVzPOqxnn1YzzasZ5NeO8mnFezTivZpxXM86rGefVjPNqxnk147yacV7NOK9mnFczzqsZ59WM82rGeTXjvJpxXs04r2acVzPOqxnn1YzzasZ5NeO8mnFezTivZpxXM86rGefVjPNqxnk147yacV7NOK9mnFczzqsZ59WM82rGeTXjvJpxXs04r2acVzPOqxnn1YzzasZ5NeO8mnFezTivZpxXM86rGefVjPNqxnk147yacV7NOK9mnFczzqsZ5zUY5zUY5zUY5zUY5zUeSmMH47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG47wG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",
      "",
      "",
      "",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod utils;\n\ncontract TicTacToe {\n    use dep::aztec::{\n        context::Context,\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        selector::compute_selector,\n        state_vars::{\n            map::Map,\n            set::Set,\n            public_state::PublicState\n        },\n        types::{\n            address::{AztecAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods,\n                FIELD_SERIALIZED_LEN\n            }\n        }\n    };\n    use crate::{\n        types::{\n            board::{\n                BOARD_SERIALIZED_LEN,\n                BoardSerializationMethods\n            },\n            game::{\n                Game, \n                GAME_SERIALIZED_LEN,\n                GameSerializationMethods\n            },\n        },\n        utils::{ \n            active_game, \n            can_play, \n            check_game_over,\n            check_winner, \n            legal_move,\n            pop_capsule\n        }\n    };\n\n    struct Storage {\n        board: Map<PublicState<[u8; BOARD_SERIALIZED_LEN], BOARD_SERIALIZED_LEN>>,\n        current_game: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        games: Map<PublicState<Game, GAME_SERIALIZED_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                board: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        PublicState::new(context, slot, BoardSerializationMethods)\n                    }\n                ),\n                current_game: PublicState::new(context, 2, FieldSerializationMethods),\n                games: Map::new(\n                    context,\n                    3,\n                    |context, slot| {\n                        PublicState::new(context, slot, GameSerializationMethods)\n                    }\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn start_game() {\n        // Initialize a new game with msg_sender as the host\n        let game = Game {\n            host: AztecAddress::new(context.msg_sender()),\n            player: AztecAddress::new(0),\n            turn: 0,\n            winner: AztecAddress::new(0)\n        };\n        let current_game_index = storage.current_game.read();\n        storage.games.at(current_game_index).write(game);\n\n        // Increment active game index\n        let new_game_index = current_game_index + 1;\n        storage.current_game.write(new_game_index);\n    }\n\n    #[aztec(public)]\n    fn join_game(index: Field) {\n        let mut game = storage.games.at(index).read();\n        game.player = AztecAddress::new(context.msg_sender());\n        storage.games.at(index).write(game);\n    }\n\n    #[aztec(public)]\n    fn turn(index: Field, row: u8, col: u8) {\n        let game = storage.games.at(index).read();\n        let is_host = game.host.address == context.msg_sender();\n        // Check that game is active\n        active_game(game);\n        // Check that sender can take turn in game\n        can_play(game, context.msg_sender());\n        // Check whether move is legal\n        let mut prev_board = storage.board.at(index).read();\n        legal_move(prev_board, row, col);\n        // Update moves\n        let coord = col + row * 3;\n        // If host, set 1 (X), if player set 4 (O) \n        if(is_host) {\n            prev_board[coord] = 1;\n        } else {\n            prev_board[coord] = 4;\n        }\n        storage.board.at(index).write(prev_board);\n\n\n        // Check to see whether game has been won\n        let mut winner = AztecAddress::new(0);\n        if(check_winner(prev_board, is_host)) {\n            winner = AztecAddress::new(context.msg_sender());\n        }\n        // Update game\n        storage.games.at(index).write(Game {\n            host: game.host,\n            player: game.player,\n            turn: game.turn + 1,\n            winner\n        })\n    }\n\n    /*\n    *   Play entire game in one transaction\n    */\n    #[aztec(public)]\n    fn play_game(index: Field) {\n        let move = pop_capsule();\n        let mut prev_board = storage.board.at(index).read();\n\n        // Check legal move\n        // legal_move(prev_board, move[0] as u8, move[1] as u8);\n\n        // let coord = move[0] + move[1] * 3;\n\n        // Check whether player is host or not\n        // if(move[2] == 0) {\n        //     prev_board[coord] = 1;\n        // } else {\n        //     prev_board[coord] = 4;\n        // }\n        // storage.board.at(index).write(prev_board);\n\n        // let game_over = check_game_over(prev_board);\n\n        // if(game_over == false) {\n        //     context.call_public_function(\n        //         context.this_address(),\n        //         compute_selector(\"play_game(Field)\"),\n        //         [index]\n        //     );\n        // }\n    }\n\n    // TODO: Add signatures in place of passed in addresses\n    #[aztec(public)]\n    fn open_channel(host: Field, player: Field) {\n        // Initialize a new game with msg_sender as the host\n        let game = Game {\n            host: AztecAddress::new(host),\n            player: AztecAddress::new(player),\n            turn: 0,\n            winner: AztecAddress::new(0)\n        };\n        let current_game_index = storage.current_game.read();\n        storage.games.at(current_game_index).write(game);\n\n        // Increment active game index\n        let new_game_index = current_game_index + 1;\n        storage.current_game.write(new_game_index);\n    }\n\n\n    /* ===== Functions for testing ===== */\n\n    unconstrained fn get_board(game_id: Field) -> [u8; BOARD_SERIALIZED_LEN] {\n        storage.board.at(game_id).read()\n    }\n\n    unconstrained fn current_game_index() -> Field {\n        storage.current_game.read()\n    }\n\n    unconstrained fn get_game(index: Field) -> Game {\n        storage.games.at(index).read()\n    }\n\n    // This function is not doing anything right now\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; 4]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/main.nr"
      },
      "12": {
        "source": "\n// TODO: Once we fully move to the new SSA pass this module can be removed and replaced\n// by the methods in the `slice` module\nimpl<T, N> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(_self: Self) -> Field {}\n\n    #[builtin(arraysort)]\n    pub fn sort(_self: Self) -> Self {}\n\n    // Sort with a custom sorting function.\n    pub fn sort_via<Env>(mut a: Self, ordering: fn[Env](T, T) -> bool) -> Self { \n        for i in 1 .. a.len() {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                }\n            }\n        }\n        a\n    }\n\n    // Converts an array into a slice.\n    pub fn as_slice(self) -> [T] {\n        let mut slice = [];\n        for elem in self {\n            slice = slice.push_back(elem);\n        }\n        slice\n    }\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1 .. self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1 .. self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n",
        "path": "std/array.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "77": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "96": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "97": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "127": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "134": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "135": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "144": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "154": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal BOARD_SERIALIZED_LEN = 9;\n\nfn deserialize(serialized: [Field; BOARD_SERIALIZED_LEN]) -> [u8; BOARD_SERIALIZED_LEN] {\n    let mut board: [u8; BOARD_SERIALIZED_LEN] = [0; BOARD_SERIALIZED_LEN];\n    for i in 0..9 {\n        board[i] = serialized[i] as u8;\n    }\n    board\n}\n\nfn serialize(board: [u8; BOARD_SERIALIZED_LEN]) -> [Field; BOARD_SERIALIZED_LEN] {\n    let mut serialized: [Field; BOARD_SERIALIZED_LEN] = [0; BOARD_SERIALIZED_LEN];\n    for i in 0..9 {\n        serialized[i] = board[i] as Field;\n    }\n    serialized\n}\n\nglobal BoardSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/types/board.nr"
      },
      "155": {
        "source": "use dep::aztec::types::{\n    address::AztecAddress,\n    type_serialization::TypeSerializationInterface\n};\n\nglobal GAME_SERIALIZED_LEN = 4;\n\nstruct Game {\n    host: AztecAddress,\n    player: AztecAddress,\n    // TODO: Determine turn externally\n    turn: u8,\n    winner: AztecAddress\n}\n\nfn deserialize(serialized: [Field; GAME_SERIALIZED_LEN]) -> Game {\n    Game {\n        host: AztecAddress::new(serialized[0]),\n        player: AztecAddress::new(serialized[1]),\n        turn: serialized[2] as u8,\n        winner: AztecAddress::new(serialized[3])\n    }\n}\n\nfn serialize(game: Game) -> [Field; GAME_SERIALIZED_LEN] {\n    [game.host.address, game.player.address, game.turn as Field, game.winner.address]\n}\n\nglobal GameSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/types/game.nr"
      },
      "156": {
        "source": "use dep::aztec::types::address::AztecAddress;\nuse crate::types::game::Game;\n\nglobal WINNING_PLACEMENTS = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6]\n];\n\npub fn active_game(game: Game) {\n    // Check that game does not have a winner\n    assert(game.winner.address == 0);\n    // Check that two players have joined a game;\n    assert((game.host.address != 0) & (game.player.address != 0));\n    // Check that game has not resulted in a draw. turns == max_turn (9)\n    assert(game.turn != 9);\n}\n\npub fn can_play(game: Game, sender: Field) {\n    // Check that player is in game\n    assert((game.host.address == sender) | (game.player.address == sender));\n\n    // Check that it is players turn. Odd turn means it is host's turn. Even is player's\n    if(game.host.address == sender) {\n        assert(game.turn % 2 == 0);\n    } else {\n        assert(game.turn % 2 == 1); \n    }\n}\n\n// Check whether endgame condition has been met for state channel\n// TODO: Handle draw condition\npub fn check_game_over(board: [u8; 9]) -> bool {\n    WINNING_PLACEMENTS.any(|placement: [Field; 3]| {\n        let mut total = 0;  \n        for i in 0..3 {\n            total += board[placement[i] as u8];\n        }\n        // Winning score is going to be 3 if host, 12 if player\n        (total == 3) | (total == 12)\n    })\n}\n\npub fn check_winner(board: [u8; 9], is_host: bool) -> bool {\n    WINNING_PLACEMENTS.any(|placement: [Field; 3]| {\n        let mut total = 0;  \n        for i in 0..3 {\n            total += board[placement[i] as u8];\n        }\n        // Winning score is going to be 3 if host, 12 if player\n        if(is_host) {\n            total == 3\n        } else {\n            total == 12\n        }\n    })\n}\n\npub fn legal_move(board: [u8; 9], row: u8, col: u8) {\n    // Row and col must be less than 3\n    assert((row < 3) & (col < 3));\n    // Coordinate must not be occupied\n    assert(board[col + row * 3] == 0);\n}\n\n#[oracle(popCapsule)]\nfn pop_capsule_oracle() -> [Field; 3] {}\n\nunconstrained pub fn pop_capsule() -> [Field; 3] {\n    pop_capsule_oracle()\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/utils.nr"
      }
    }
  }
}