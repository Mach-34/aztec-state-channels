{
  "name": "TicTacToe",
  "functions": [
    {
      "name": "clear_capsule_stack",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 13,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "current_game_index",
      "functionType": "open",
      "isInternal": true,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "authwit::aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_current_game_index",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx00iwEJL7AnVP5Qd/ADypRcUQC/i8IZNTBqnppKnyJ6yQzztiuEREjX2tkNKP8Y/EDxbuytgstEF8tTP/G8AUrUc62rPvyFluX97Sb0DCQtrV4uD6MK8SV5LeOiDVKi0Q+9rJ2B9r3E3fCBB/fR8zJqIO+yxp59ZZ2mX00Yp6OvsG1VTmsmQt0AK5TufyTN9blbTPGhnjRF5F0Bz/OJfK5f6w6F2WdmQoy9kAtTO5/2NzsrtmDWT/8nx7P272/DuehvxhKy6kULaXGPo88SuooNlfGSDHgcGm1PNXer3GNWrO9APM4bgIQBwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_game",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "index",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::game::GameNote",
          "fields": [
            {
              "name": "board",
              "type": {
                "kind": "array",
                "length": 9,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            {
              "name": "host",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "player",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "turn",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            {
              "name": "winner",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "increment_current_game_index",
      "functionType": "open",
      "isInternal": true,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "authwit::aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "authwit::aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "open_channel",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "host",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "host_signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "player_signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "play_game",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "test_capsule",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7WUTQrCMBCFp00arYJb197AblwHPIkLd4IB8f42OMHPEKjS9EGYNPP33rSNE5FG3jDyQQPrsG81zo6rU99B/Q75Xu1xJhy41KrZKfeIHpxbtbtxbQuzcIjxdbgMjXzDF/j04JAQ+e/ht4WcpNHgLPktzgxq5rnUbhfQzj4ez6nXBhy6Cb3uT70pfrWMvhP7C3QSHnsLXqYul2Gts4wI93C+hMfzduVf3qI7wa/h12nzTZWmnU+hmsy87tTVlfACpiq9lQcFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "test_move_signature",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "account",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "game_index",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "turn",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "row",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "col",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "s_1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "s_2",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "s_3",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "test_note_removal_from_set",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJzdm9FuGjEQRf9ln1Hl8dgem1+p+hC1qRQpIlXhLeLfu0mwd2WcGUWQW9q3RZprTobljDHkeXp8+n53eHja7aft88TT9uvztP91t3t5tD/c/T5M20wUN9P97sfLpc/HzfTz4fF+2tLx22YK4wRLTfjMq8TmvDZGV2tjplZb0svy8fLll9rz5dPlyxdfa9Oqdl7+vLhQro0sTD2LYFkicWWJ7DqWfEMs5YZYyN0SDN0SjL8lmHc89ndgrqDI68FcQajXgwHrV4dB+ze5BiPSw6AFrMKgDazBeLSBVRi0gVUYtIFVGLSBVRi0gVUYtIFVGLSBVRiwgRNRhUmrjzUnGLCBdRiwgVUYBhtYhwEbWIcBG1iHARtYhwEbWIcBG1iHARtYh8EamJzz6VQ9XwfucbAONnGwFrZwAtbDJg7WxCYO1sUmDtbGJg7WxyYO1sgmDtbJJg7cytk3nPlRjwO3so4Dt7KKE+FW1nHgVtZx4FbWceBW1nHgVtZx4FbWceBW1nHQVqawDAlKocdBW9nAQVtZx0loKxs4aCsbOGgrGzhoKxs4aCsbOGgrGzhoKxs4YCv75UR7vpbS44CtbOGArWzgCNjKFg7YyhYO2MoWDtjKFg7YyhYO2MoWDtjKFg7ayslJw0mhP+YWtJVTajPLi+/PdwRtZQl+wck9TkZbObsFJ3PqccBWZh/rNyTE7Pp7J4OtzLycDTKf/YA1g63MXErDCcn3OGArc8jNOxwl9jhgK3Ms3HBS6jWYwVZmoaU74kkvD7myx9VdT74MahP7unKKvOIIo+8cpcnY+dVLJK89AY+Gf6In4Pn0sZ5EX5eOQYyeSGn2khKd3pPgQv15fCAnlzQQPFH/uwYW8B7g8xqYJdSBlSVHvSc+lnAqnvds+ZIGonctn9fA+dkrRwlGA/WeoLdOH1N9s/c8xI2eqH8mfxnuOthTDbHnVddjfEsNNwdmajg+zdRwwJipoVWNVBinArduu2XHT8RvmfH/2Vih4XuOSg3NoKuQfz0QeyekPtMcGt7JVmi4VbdCww21FRregEroePwDdStEpg==",
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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Y8mGx5INjyUbHks2PJYsPJYsPJYsPJYsPJYsPpprGx5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5LFh5Llh5Llh5Llh5Llh5Llh/NtU2PJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJUuPJSuPJSuPJSuPJSuPJauP5tqWx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KVx5KV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",
      "",
      "",
      "eJztnd2O2zYQRt/F14uAHP7vqxS9CNoUCBAkRZO7YN+96m5IcVdjDSzLnP1UXzUFSPn4szVH9Iqjn6cv3/74+OPzt6/fT48/T9bZ0+NvP0/f//749b////7j4z8/To/m4fTp65/Tf58eTn99/vLp9GifHhajrHcx/ho5/TvnNrp4bngga+vwQFEYXlKqgw2FeWx6+v1h4iZQbgfK7UG5Ayh3BOVOA7mdD43bm3AVd+a4Ywr516SYyjo9UarwRCXOY0NgRsfo6oHLDEPs+zSpVHJrYz/4mbygknsDS85aE4Kc9SYEOWtOCHLWnRDkrD0hyFl/QpCzBoUgh3Woh3VogHVogHVogHVogHVogHVogHVogHVogHVogHVogHVohHVohHVohHVohHVohHVohHVohHVohHVohHVohHVognVognVognVognVognVognVognVognVognVognVohnVohnVohnVohnVohnVohnVohnVohnVohnVohnVogXVogXVogXVogXVogXVogXVogXVogXVogXVoQXUoGVSHkkF1KJnrHeqo3sVPzrtx5Nc7VIv8eodqkV/vUC3y6x2qRX69Q7XIr3eoFvn1DlUit9c7VIv8eodqkcM61MI61MI61MI61MI61MI61MI61MI6lGAdSrAOJViHEqxDCdahBOtQgnUowTqUYB1KsA51sA7lOxNBkMM6lO9OBEEO61C+QxEEOaxD+S5FEOSwDt2hT5ES+Q59irTIYR26Q58iLXJYh+7Qp0iLHNahO/Qp0iKHdegOfYq0yGEdukOfIi1yWIfu0KdIixzWoTv0KdIih3XoDn2KtMhhHbpDnyItcliH7tCnSIsc1qE79CnSIod16A59irTIYR16pk9Rzqa9gFkn96a+SR+7kba8HJ833QXHD6UGE314dXwmRUM1xFLa2MJFuNoWns60EroAO86ffU7LWHgZFSrz52qviP1MW54Ljq8S+5mePBdgr8d+pnNOyfW9JhN8d/znOWw9TSbXZxAkGxdz2EqW7Pw6tri3c9gakqZ1aJ0zlZm3c9izN3lX97IkH9fzyqG+jdzvenFcKRE+O/ZMV2JhT99LWEqy8/GzAGNT+2BtJuHAtpbu4rrz1sUXcLYuAIDzPUwQwNmSgwDO1rJX4DmsHt+Sq8XSTjp59QrL0dMVTD07XXd2GsfJI1chRNPLw3DyyLbtvMu+e5+BzS/7Ob8UhNHrVYLvpPI+Eoy2JRhJSrC9S0ddfoZjEBLhvXWzRIo3jcakV5E84/BKHIJjaYkj23ZXHGt9LQB2KhbCN8bZpk83nSXCmUG+1GNToCiMXr/Y5Du1/B9yUblI5tvL/B/iXr+455vXgObi8pxLlHKhJhaXuq9Wfo6F74yTgmvrl5jLeize2DTn4rvns71civAtbC58CeNXX4K/2rnsJUL7JcRbX/qX4IaH+UrNJ+sXRPzVwy2Jim3PvZvOG1oQ8fbWJOIFrknEO1yTiLenJhEvGE0ivrTrETm+V4oq0R5FeF+i8TVbIlKo2ZFmolQWRAo1WyBSqNkCkULNFogUarZApFCzBSKFmr1OxPfmUCVSqNkCkULNFoiG1+xg2g+v07+7n14r0fCaLRINr9ki0fCaLRINr9ki0fCaLRINr9kSEd8LQpVoeM0WiYbXbJFofM321H6iCt6//bXG8b0WVInG12yJaHzNlojG12yJaHzNlojG12yBiO89oEo0vmZLRONrtkSkULPzbJFJKQsihZotECnUbIFIoWYLRAo1WyBSqNkCkULNXifi97qrEinUbIFIoWYLRONrdvCzRUJ3Q2olGl+zJaLxNVsiGl+zJaLxNVsiGl+zJaLxNVsg4vdWqxKNr9kS0fiaLRENr9nRt9vUbAzLv4rye5dvSjTJrBHF7s7PSjS8Zsfo/EyUlp/a8JqdTLuryybrlxkNr9lp+twaEdHiVz9+b/BNibob9pJbXh/xe35vSuRsG5784q4xx+/lvSmRd+3vaymYt3fWOX6P7k2JpsvamSgIw2O7yzLG/pZM7k746Kht0Atu3mFVLt4c4PgNwPdYhtvrwljazpPUbyhgY7G2zGIkY8N6MN74+ia97Z21IcXhxr1himRzIyHqdrawwViT3bxfqlyZ4/DrhIPmOP7q5pg5jr8mO2aO468kj5nj+OvfQ+bIt1O453hxju99rYGS43tfnKDkeKTVjGaO9/XMPjne1zP75Hhfz+yT4309s0+O9/XMPjne1zO75HimWxNojo5iy9F13XLO5Oh8+3uI6bs8bMnxUOsZxRwPtZ5RzPFQ6xnFHA+1nlHM8VDrGcUcD7WeUczxUOsZxRwPtZ5RzPFQ6xm9HHfpcXbP0e3SyO2eoxvfre6gOd7XM/vkeF/P7JPjfT2zT46HWs+kMv+O2/ck3xLMO1+ghPYAlIlJCEZ4wkr8wL5XyhXHue6+5vrclPiBXXqIs9gLbXEW3zFMnsZeRgnTyqY8yqY8yqY8yrY8yqY8sv/Ad/4KpX6tou16kXvbprGyk6extX3uHh36afTrGQybvsR505c4b/oS521f4rztS5ynz5oNxLWn5Xjq9h/kNosNRJzFBuJbjQqxK95U22HzMYb2mKxXD1wgV2fxMcrT2Bht29tFtu9kTi/T6Mw04dWmaezCQ57Gn2niNP5ME6exZ9rKtKenfwEGtPJO",
      "",
      "eJyd0jEKAyEQheG7TC3BGWNcvUpIIckGFhY3RDvx7snCQhqJ8LqZ4mt+XqV1u8eybClTqKRPlsK1Un7FtP+5xHehMHntFc3psZ8iTdFzWWcK3G7qay6AcYCZAOMBwxpBjCBBkEHQGUHIGhiZAyN7kG4II+wOZMS4H7L2YN0UY9aNMWbdHGPWDfKXtfYBJ2IUqQ==",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod utils;\n\ncontract TicTacToe {\n    use dep::std::{\n        option::Option,\n        schnorr::verify_signature\n    };\n    use dep::aztec::{\n        context::Context,\n        log::emit_encrypted_log,\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            note_viewer_options::NoteViewerOptions,\n            utils as note_utils\n        },\n        oracle::{\n            get_public_key::get_public_key\n        },\n        selector::compute_selector,\n        state_vars::{\n            map::Map,\n            set::Set,\n            singleton::Singleton,\n            public_state::PublicState\n        },\n        types::{\n            address::{AztecAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods,\n                FIELD_SERIALIZED_LEN\n            }\n        }\n    };\n    use crate::{\n        types::{\n            game::{\n                GameNote, \n                GameNoteMethods,\n                GAME_NOTE_LEN,\n            },\n        },\n        utils::{ \n            active_game, \n            can_play, \n            check_game_over,\n            deserialize_move_signature,\n            encode_channel_msg,\n            encode_move_msg,\n            legal_move,\n            pop_capsule\n        }\n    };\n\n    struct Storage {\n        current_game: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        games: Map<Set<GameNote, GAME_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                current_game: PublicState::new(context, 1, FieldSerializationMethods),\n                games: Map::new(\n                    context,\n                    2,\n                    |context, slot| {\n                        Set::new(context, slot, GameNoteMethods)\n                    }\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // #[aztec(public)]\n    // fn start_game() {\n    //     // Initialize a new game with msg_sender as the host\n    //     let game = Game {\n    //         host: AztecAddress::new(context.msg_sender()),\n    //         player: AztecAddress::new(0),\n    //         turn: 0,\n    //         winner: AztecAddress::new(0)\n    //     };\n    //     let current_game_index = storage.current_game.read();\n    //     storage.games.at(current_game_index).write(game);\n\n    //     // Increment active game index\n    //     let new_game_index = current_game_index + 1;\n    //     storage.current_game.write(new_game_index);\n    // }\n\n    // #[aztec(public)]\n    // fn join_game(index: Field) {\n    //     let mut game = storage.games.at(index).read();\n    //     game.player = AztecAddress::new(context.msg_sender());\n    //     storage.games.at(index).write(game);\n    // }\n\n    // #[aztec(public)]\n    // fn turn(index: Field, row: u8, col: u8) {\n    //     let game = storage.games.at(index).read();\n    //     let is_host = game.host.address == context.msg_sender();\n    //     // Check that game is active\n    //     active_game(game);\n    //     // Check that sender can take turn in game\n    //     can_play(game, context.msg_sender());\n    //     // Check whether move is legal\n    //     let mut prev_board = storage.board.at(index).read();\n    //     legal_move(prev_board, row, col);\n    //     // Update moves\n    //     let coord = col + row * 3;\n    //     // If host, set 1 (X), if player set 4 (O) \n    //     if(is_host) {\n    //         prev_board[coord] = 1;\n    //     } else {\n    //         prev_board[coord] = 4;\n    //     }\n    //     storage.board.at(index).write(prev_board);\n\n\n    //     // Check to see whether game has been won\n    //     let mut winner = AztecAddress::new(0);\n    //     if(check_winner(prev_board, is_host)) {\n    //         winner = AztecAddress::new(context.msg_sender());\n    //     }\n    //     // Update game\n    //     storage.games.at(index).write(Game {\n    //         host: game.host,\n    //         player: game.player,\n    //         turn: game.turn + 1,\n    //         winner\n    //     })\n    // }\n\n    /*\n    *  Plays an entire game in one transaction and closes the\n    */\n    #[aztec(private)]\n    fn play_game(game_id: Field) {\n        let games = storage.games.at(game_id).get_notes(NoteGetterOptions::new());\n        // Check that game exists\n        assert(games[0].is_some(), \"Game does not exist.\");\n        let mut game = games[0].unwrap_unchecked();\n        // Check that game is active\n        active_game(game);\n\n        // Pop next move off of capsule\n        let turn = pop_capsule();\n        let row = turn[0] as u8;\n        let col = turn[1] as u8;\n        let sender = turn[2];\n        let move_signature = deserialize_move_signature(turn[3], turn[4], turn[5]);\n\n        // Check that move has been authorized by specified player\n        let move_msg = encode_move_msg(game_id, game.turn, row, col);\n        let sender_pubkey = get_public_key(sender);\n        let verified = verify_signature(\n            sender_pubkey.x, \n            sender_pubkey.y,\n            move_signature,\n            move_msg\n        );\n        assert(verified, \"Move signature could not be verified.\");\n\n        // Check that player is in game and it is their turn\n        can_play(game, sender);\n\n        // Check legal move\n        legal_move(game.board, row, col);\n\n        let coord = row * 3 + col;\n\n\n        // Remove note so we do not have duplicates\n        storage.games.at(game_id).remove(game);\n\n        // Check whether sender is host or not\n        if(sender == game.host.address) {\n            game.board[coord] = 1;\n        } else {\n            game.board[coord] = 4;\n        }\n\n        let game_over = check_game_over(game);\n\n        if(game_over) {\n            game.turn += 1;\n            // No winner assigned if draw\n            if(game.turn != 9) {\n                game.winner = AztecAddress::new(sender);\n            }\n            storage.games.at(game_id).insert(&mut game, true);\n        } else {\n            game.turn += 1;\n            storage.games.at(game_id).insert(&mut game, false);\n            context.call_private_function(\n                context.this_address(),\n                compute_selector(\"play_game(Field)\"),\n                [game_id]\n            );\n        }\n    }\n\n    #[aztec(private)]\n    fn open_channel(\n        host: Field, \n        player: Field, \n        host_signature: [u8; 64], \n        player_signature: [u8; 64], \n        game_id: Field\n    ) {\n        // Initialize a new game with msg_sender as the host\n        // let return_vals = context.call_public_function(\n        //     context.this_address(),\n        //     compute_selector(\"current_game_index()\"),\n        //     []\n        // );\n\n        let channel_msg = encode_channel_msg(host, player);\n\n        // Verify host and player have agreed to start a game\n        let hostPubkey = get_public_key(host);\n        let playerPubkey = get_public_key(player);\n\n        let hostVerified = verify_signature(hostPubkey.x, hostPubkey.y, host_signature, channel_msg);\n        let playerVerified = verify_signature(playerPubkey.x, playerPubkey.y, player_signature, channel_msg);\n        assert(hostVerified, \"Host signature could not be verified\");\n        assert(playerVerified, \"Player signature could not be verified\");\n\n        // Initialize game\n        let mut game = GameNote::new(AztecAddress::new(host), AztecAddress::new(player));\n        storage.games.at(game_id).insert(&mut game, true);\n\n        // Increment active game index\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"increment_current_game_index()\"),\n            []\n        );\n    }\n\n    #[aztec(public)]\n    internal fn current_game_index() -> Field {\n        storage.current_game.read()\n    }\n\n    #[aztec(public)]\n    internal fn increment_current_game_index() {\n        let current_game_index = storage.current_game.read();\n        storage.current_game.write(current_game_index + 1);\n    }\n\n\n    /* ===== Functions for testing ===== */\n\n    #[aztec(private)]\n    fn clear_capsule_stack() {\n       pop_capsule();\n       context.call_private_function(\n            context.this_address(),\n            compute_selector(\"clear_capsule_stack()\"),\n            []\n        );\n    }\n\n    #[aztec(private)]\n    fn test_note_removal_from_set() {\n       let games = storage.games.at(0).get_notes(NoteGetterOptions::new());\n       if(games[0].is_some()) {\n        let game = games[0].unwrap_unchecked();\n        storage.games.at(0).remove(game);\n       }\n    }\n\n    unconstrained fn get_current_game_index() -> Field {\n        storage.current_game.read()\n    }\n\n    unconstrained fn get_game(index: Field) -> GameNote {\n        let games = storage.games.at(index).view_notes(NoteViewerOptions::new());\n        games[0].unwrap_unchecked()\n    }\n\n    unconstrained fn test_capsule() -> [Field; 6] {\n        pop_capsule()\n    }\n\n    unconstrained fn test_move_signature(\n        account: Field, \n        game_index: Field,\n        turn: u8,\n        row: u8,\n        col: u8,\n        s_1: Field, \n        s_2: Field, \n        s_3: Field\n    ) -> bool {\n        let msg = encode_move_msg(game_index, turn, row, col);\n        let signature = deserialize_move_signature(s_1, s_2, s_3);\n        let pubkey = get_public_key(account);\n        verify_signature(pubkey.x, pubkey.y, signature, msg)\n    }\n    \n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; GAME_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(GameNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/main.nr"
      },
      "12": {
        "source": "\n// TODO: Once we fully move to the new SSA pass this module can be removed and replaced\n// by the methods in the `slice` module\nimpl<T, N> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(_self: Self) -> Field {}\n\n    #[builtin(arraysort)]\n    pub fn sort(_self: Self) -> Self {}\n\n    // Sort with a custom sorting function.\n    pub fn sort_via<Env>(mut a: Self, ordering: fn[Env](T, T) -> bool) -> Self { \n        for i in 1 .. a.len() {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                }\n            }\n        }\n        a\n    }\n\n    // Converts an array into a slice.\n    pub fn as_slice(self) -> [T] {\n        let mut slice = [];\n        for elem in self {\n            slice = slice.push_back(elem);\n        }\n        slice\n    }\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1 .. self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1 .. self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n",
        "path": "std/array.nr"
      },
      "19": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "20": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "24": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "77": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "95": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "96": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "97": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "98": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "103": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "104": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "106": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "110": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "112": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "119": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "120": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "123": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "126": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "127": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "128": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "129": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "130": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "134": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "135": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "136": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "141": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "144": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "147": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "154": {
        "source": "use dep::aztec::{\n    context::PrivateContext,\n    hash::pedersen_hash,\n    log::emit_encrypted_log,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n    types::{\n        address::AztecAddress\n    }\n};\n\nglobal GAME_NOTE_LEN = 13;\n\nstruct GameNote {\n    board: [u8; 9],\n    host: AztecAddress,\n    player: AztecAddress,\n    turn: u8,\n    winner: AztecAddress,\n    header: NoteHeader\n}\n\nimpl GameNote {\n    pub fn new(host: AztecAddress, player: AztecAddress) -> Self {\n        GameNote {\n            board: [0; 9],\n            header: NoteHeader::empty(),\n            host,\n            player,\n            turn: 0,\n            winner: AztecAddress::new(0)\n        }\n    }\n    \n    pub fn deserialize(serialized: [Field; GAME_NOTE_LEN]) -> Self {\n        let mut board: [u8; 9] = [0; 9]; \n        for i in 0..9 {\n            board[i] = serialized[i] as u8;\n        }\n        GameNote {\n            board,\n            host: AztecAddress::new(serialized[9]),\n            player: AztecAddress::new(serialized[10]),\n            turn: serialized[11] as u8,\n            winner: AztecAddress::new(serialized[12]),\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn serialize(note: GameNote) -> [Field; GAME_NOTE_LEN] {\n        let mut serialized: [Field; GAME_NOTE_LEN] = [0; GAME_NOTE_LEN];\n        for i in 0..9 {\n            serialized[i] = note.board[i] as Field;\n        }\n        serialized[9] = note.host.address;\n        serialized[10] = note.player.address;\n        serialized[11] = note.turn as Field;\n        serialized[12] = note.winner.address;\n        serialized\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(GameNoteMethods, self);\n        let secret = get_secret_key(self.host.address);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high\n        ], 0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            get_public_key(self.host.address),\n            self.serialize()\n        );\n    }\n}\n\nfn deserialize(serialized: [Field; GAME_NOTE_LEN]) -> GameNote {\n    GameNote::deserialize(serialized)\n}\n\nfn serialize(note: GameNote) -> [Field; GAME_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: GameNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: GameNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: GameNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut GameNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: GameNote) {\n    note.broadcast(context, slot)\n}\n\nglobal GameNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/types/game.nr"
      },
      "155": {
        "source": "use dep::aztec::types::address::AztecAddress;\nuse dep::std::option::Option;\nuse crate::types::game::GameNote;\n\nglobal WINNING_PLACEMENTS = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6]\n];\n\npub fn active_game(game: GameNote) {\n    // Check that game does not have a winner\n    assert(game.winner.address == 0, \"Game has concluded with winner.\");\n    // Check that two players have joined a game;\n    // assert((game.host.address != 0) & (game.player.address != 0));\n    // Check that game has not resulted in a draw. turns == max_turn (9)\n    assert(game.turn != 9, \"Game has concluded with draw.\");\n}\n\npub fn can_play(game: GameNote, sender: Field) {\n    assert((game.host.address == sender) | (game.player.address == sender), \"Sender is not player or host.\");\n\n    // Check that it is players turn. Event turn means it is host's turn. Odd is challenger\n    // let can_move = if game.host.address == sender {\n    //     game.turn % 2 == 0\n    // } else { \n    //     game.turn % 2 == 1\n    // };\n    // assert(can_move, \"Not player's turn.\");\n}\n\n// Check whether endgame condition has been met for state channel\npub fn check_game_over(game: GameNote) -> bool {\n    let winner = WINNING_PLACEMENTS.any(|placement: [Field; 3]| {\n        let mut total = 0;  \n        for i in 0..3 {\n            total += game.board[placement[i] as u8];\n        }\n        // Winning score is going to be 3 if host, 12 if player\n        (total == 3) | (total == 12)\n    });\n    // Return if there is a winner or a draw\n    winner | (game.turn + 1 == 9)\n}\n\npub fn deserialize_move_signature(s_1: Field, s_2: Field, s_3: Field) -> [u8; 64] {\n    let mut signature: [u8; 64] = [0; 64];\n    let s_1_bytes = s_1.to_be_bytes(20);\n    let s_2_bytes = s_2.to_be_bytes(20);\n    let s_3_bytes = s_3.to_be_bytes(24);\n\n    for i in 0..20 {\n        signature[i] = s_1_bytes[i];\n        signature[i + 20] = s_2_bytes[i];\n        signature[i + 40] = s_3_bytes[i];\n    }\n    signature[60] = s_3_bytes[20];\n    signature[61] = s_3_bytes[21];\n    signature[62] = s_3_bytes[22];\n    signature[63] = s_3_bytes[23];\n    signature\n}\n    \n\npub fn encode_channel_msg(host: Field, player: Field) -> [u8; 64] {\n    let mut msg: [u8; 64] = [0; 64];\n    let host_bytes = host.to_be_bytes(32);\n    let player_bytes = player.to_be_bytes(32);\n    for i in 0..32 {\n        msg[i] = host_bytes[i];\n        msg[i + 32] = player_bytes[i];\n    }\n    msg\n}\n\npub fn encode_move_msg(game_id: Field, turn: u8, row: u8, col: u8) -> [u8; 35] {\n    let mut msg: [u8; 35] = [0; 35];\n    // Since game index can grow arbitrarily large it is converted to 32 bytes\n    let game_bytes = game_id.to_be_bytes(32);\n    for i in 0..32 {\n        msg[i] = game_bytes[i];\n    }\n    msg[32] = turn;\n    msg[33] = row;\n    msg[34] = col;\n    msg\n}\n\npub fn legal_move(board: [u8; 9], row: u8, col: u8) {\n    // Row and col must be less than 3\n    assert((row < 3) & (col < 3), \"Coordinate out of bounds.\");\n    // Coordinate must not be occupied\n    assert(board[col + row * 3] == 0, \"Coordinate is already occupied.\");\n}\n\n#[oracle(popCapsule)]\nfn pop_capsule_oracle() -> [Field; 6] {}\n\nunconstrained pub fn pop_capsule() -> [Field; 6] {\n    pop_capsule_oracle()\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/aztec-state-channels/contracts/tic_tac_toe/src/utils.nr"
      }
    }
  }
}